import streamlit as st
from pydantic import BaseModel
from datetime import date, datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import requests
from bs4 import BeautifulSoup
import os
import pandas as pd
import numpy as np

st.set_page_config(page_title="–ó–¥–æ—Ä–æ–≤'—è: —â–æ–¥–µ–Ω–Ω–∏–∫ —ñ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")
st.markdown("""
    <style>
        .main {background-color: #F5F6FA;}
        h1, h2, h3 { color: #CC0000; }
        .stButton>button {background-color:#CC0000; color:white;}
    </style>
""", unsafe_allow_html=True)

class BMIInput(BaseModel):
    height_cm: float
    weight_kg: float

class BMIOutput(BaseModel):
    bmi: float
    status: str

def calculate_bmi(input: BMIInput) -> BMIOutput:
    bmi = input.weight_kg / ((input.height_cm / 100) ** 2)
    if bmi < 18.5:
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞"
    elif bmi < 25:
        status = "–ù–æ—Ä–º–∞"
    elif bmi < 30:
        status = "–ù–∞–¥–º—ñ—Ä–Ω–∞ –≤–∞–≥–∞"
    else:
        status = "–û–∂–∏—Ä—ñ–Ω–Ω—è"
    return BMIOutput(bmi=round(bmi, 2), status=status)

CALORIE_TABLE = {
    "—è–±–ª—É–∫–æ": 52,
    "—Ö–ª—ñ–±": 265,
    "–º–æ–ª–æ–∫–æ": 42,
    "—è–π—Ü–µ": 155,
}

def calculate_calories(product: str, grams: float) -> float:
    kcal_per_100 = CALORIE_TABLE.get(product.lower(), 0)
    calories = kcal_per_100 * grams / 100
    return round(calories, 2)

def save_entry(entry_date: date, weight: float, calories: float, notes: str) -> str:
    line = f"{entry_date},{weight},{calories},{notes}\n"
    with open("diary.csv", "a", encoding="utf-8") as f:
        f.write(line)
    return "–ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"

def plot_weight_progress(df):
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.plot(df["–î–∞—Ç–∞"], df["–í–∞–≥–∞ (–∫–≥)"], marker="o", linestyle='-', color='#007ACC', linewidth=2, markersize=8, label="–í–∞–≥–∞")
    ax.fill_between(df["–î–∞—Ç–∞"], df["–í–∞–≥–∞ (–∫–≥)"], color='#A4D3F7', alpha=0.3)
    ax.set_title("–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∞–≥–∏", fontsize=18, fontweight='bold')
    ax.set_xlabel("–î–∞—Ç–∞", fontsize=14)
    ax.set_ylabel("–í–∞–≥–∞ (–∫–≥)", fontsize=14)
    ax.legend()
    ax.xaxis.set_major_locator(mdates.YearLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    plt.gcf().autofmt_xdate()
    st.pyplot(fig)

def plot_calories_progress(df):
    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(df["–î–∞—Ç–∞"], df["–ö–∞–ª–æ—Ä—ñ—ó"], marker="s", color='orange', linewidth=2, markersize=7, label="–ö–∞–ª–æ—Ä—ñ—ó")
    ax.set_title("–î–∏–Ω–∞–º—ñ–∫–∞ –∫–∞–ª–æ—Ä—ñ–π", fontsize=16)
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–ö–∫–∞–ª")
    ax.legend()
    ax.xaxis.set_major_locator(mdates.YearLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    plt.gcf().autofmt_xdate()
    st.pyplot(fig)

def plot_weight_vs_calories(df):
    fig, ax = plt.subplots(figsize=(7, 4))
    ax.scatter(df["–ö–∞–ª–æ—Ä—ñ—ó"], df["–í–∞–≥–∞ (–∫–≥)"], c=df["–î–∞—Ç–∞"].dt.year, cmap='viridis', s=70)
    ax.set_title("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤–∞–≥–∏ –≤—ñ–¥ –∫–∞–ª–æ—Ä—ñ–π", fontsize=16)
    ax.set_xlabel("–ö–∞–ª–æ—Ä—ñ—ó")
    ax.set_ylabel("–í–∞–≥–∞ (–∫–≥)")
    st.pyplot(fig)

def get_calories_from_web(product: str) -> str:
    try:
        base_url = "https://www.tablycjakalorijnosti.com.ua/tablytsya-yizhyi"
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
        page = 1
        product_lower = product.lower()

        while True:
            url = f"{base_url}?page={page}"
            response = requests.get(url, headers=headers)
            response.encoding = "utf-8"
            soup = BeautifulSoup(response.text, "html.parser")
            rows = soup.select("table tbody tr")

            if not rows:
                break  

            for row in rows:
                columns = row.find_all("td")
                if len(columns) >= 2:
                    name = columns[0].get_text(strip=True).lower()
                    if product_lower in name:
                        cal = columns[1].get_text(strip=True)
                        protein = columns[2].get_text(strip=True)
                        carbs = columns[3].get_text(strip=True)
                        fat = columns[4].get_text(strip=True)
                        fiber = columns[5].get_text(strip=True) if len(columns) > 5 else "‚Äî"
                        return (
                            f"–ü—Ä–æ–¥—É–∫—Ç: {name.capitalize()}\n"
                            f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {cal} –∫–∫–∞–ª / 100 –≥\n"
                            f"–ë—ñ–ª–∫–∏: {protein} –≥\n"
                            f"–í—É–≥–ª–µ–≤–æ–¥–∏: {carbs} –≥\n"
                            f"–ñ–∏—Ä–∏: {fat} –≥\n"
                            f"–ö–ª—ñ—Ç–∫–æ–≤–∏–Ω–∞: {fiber} –≥"
                        )

            page += 1  

        return "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ: {e}"

def show_and_download_diary():
    if not os.path.exists("diary.csv"):
        st.warning("–§–∞–π–ª diary.csv –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    try:
        df = pd.read_csv("diary.csv", header=None, names=["–î–∞—Ç–∞", "–í–∞–≥–∞ (–∫–≥)", "–ö–∞–ª–æ—Ä—ñ—ó", "–ü—Ä–∏–º—ñ—Ç–∫–∏"])
        st.dataframe(df)
        with open("diary.csv", "rb") as f:
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ diary.csv",
                data=f,
                file_name="diary.csv",
                mime="text/csv"
            )
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

st.markdown("<h1 style='text-align:center;'>–ó–¥–æ—Ä–æ–≤'—è: –í–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ñ —â–æ–¥–µ–Ω–Ω–∏–∫ </h1>", unsafe_allow_html=True)

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "–Ü–ú–¢ (BMI)",
    "–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π",
    "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –≤ —â–æ–¥–µ–Ω–Ω–∏–∫",
    "–ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "–ö–∞–ª–æ—Ä—ñ—ó –∑ web",
    "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫",
])

with tab1:
    st.header("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢ (BMI)")
    col1, col2 = st.columns(2)
    with col1:
        height = st.number_input("–í–≤–µ–¥—ñ—Ç—å –∑—Ä—ñ—Å—Ç (—Å–º):", min_value=50.0, max_value=250.0, value=170.0)
    with col2:
        weight = st.number_input("–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–∫–≥):", min_value=10.0, max_value=300.0, value=65.0)
    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –Ü–ú–¢"):
        input_data = BMIInput(height_cm=height, weight_kg=weight)
        result = calculate_bmi(input_data)
        st.success(f"–í–∞—à –Ü–ú–¢: {result.bmi} ‚Äî {result.status}")
        if result.status == "–ù–æ—Ä–º–∞":
            st.balloons()
        elif result.status == "–û–∂–∏—Ä—ñ–Ω–Ω—è":
            st.warning("–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ä–∞—Ü—ñ–æ–Ω —Ç–∞ —Ñ—ñ–∑–∏—á–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!")

with tab2:
    st.header("–ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π")
    col1, col2 = st.columns(2)
    with col1:
        product = st.selectbox("–ü—Ä–æ–¥—É–∫—Ç:", list(CALORIE_TABLE.keys()) + ["—ñ–Ω—à–µ"])
    with col2:
        grams = st.number_input("–í–∞–≥–∞ –ø—Ä–æ–¥—É–∫—Ç—É (–≥)", min_value=0.0, max_value=1000.0, value=100.0)
    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å"):
        if product != "—ñ–Ω—à–µ":
            calories = calculate_calories(product, grams)
            st.info(f"–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å {grams} –≥ {product}: {calories} –∫–∫–∞–ª")
        else:
            st.info("–î–ª—è —ñ–Ω—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –ø–æ—à—É–∫–æ–º —É –≤–∫–ª–∞–¥—Ü—ñ '–ö–∞–ª–æ—Ä—ñ—ó –∑ web'.")

with tab3:
    st.header("–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –≤ —â–æ–¥–µ–Ω–Ω–∏–∫")
    entry_date = st.date_input("–î–∞—Ç–∞ –∑–∞–ø–∏—Å—É", value=date.today())
    weight_entry = st.number_input("–í–∞–≥–∞ (–∫–≥)", min_value=10.0, max_value=300.0, value=65.0, key="weight_entry")
    calories_entry = st.number_input("–ö–∞–ª–æ—Ä—ñ—ó (–∫–∫–∞–ª)", min_value=0.0, max_value=10000.0, value=2000.0, key="calories_entry")
    notes = st.text_area("–ü—Ä–∏–º—ñ—Ç–∫–∏")
    if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å"):
        msg = save_entry(entry_date, weight_entry, calories_entry, notes)
        st.success(msg)
        st.info("–î–∞–Ω—ñ –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è —É —Ñ–∞–π–ª diary.csv —É —Ü—ñ–π –ø–∞–ø—Ü—ñ.")

with tab4:
    st.header("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    if os.path.exists("diary.csv"):
        df = pd.read_csv("diary.csv", header=None, names=["–î–∞—Ç–∞", "–í–∞–≥–∞ (–∫–≥)", "–ö–∞–ª–æ—Ä—ñ—ó", "–ü—Ä–∏–º—ñ—Ç–∫–∏"])
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], errors="coerce")
        df = df.dropna(subset=["–î–∞—Ç–∞"])
        df = df.sort_values("–î–∞—Ç–∞")

        if not df.empty:
            # –ú–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3 = st.columns(3)
            col1.metric("–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞", f"{df['–í–∞–≥–∞ (–∫–≥)'].mean():.2f} –∫–≥")
            col2.metric("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞", f"{df['–í–∞–≥–∞ (–∫–≥)'].min():.2f} –∫–≥")
            col3.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞", f"{df['–í–∞–≥–∞ (–∫–≥)'].max():.2f} –∫–≥")

            col4, col5, col6 = st.columns(3)
            col4.metric("–°–µ—Ä–µ–¥–Ω—ñ –∫–∞–ª–æ—Ä—ñ—ó", f"{df['–ö–∞–ª–æ—Ä—ñ—ó'].mean():.0f} –∫–∫–∞–ª")
            col5.metric("–ú—ñ–Ω. –∫–∞–ª–æ—Ä—ñ—ó", f"{df['–ö–∞–ª–æ—Ä—ñ—ó'].min():.0f} –∫–∫–∞–ª")
            col6.metric("–ú–∞–∫—Å. –∫–∞–ª–æ—Ä—ñ—ó", f"{df['–ö–∞–ª–æ—Ä—ñ—ó'].max():.0f} –∫–∫–∞–ª")

            st.markdown("#### üìâ –ì—Ä–∞—Ñ—ñ–∫ –≤–∞–≥–∏")
            plot_weight_progress(df)

            with st.expander("–î–∏–Ω–∞–º—ñ–∫–∞ –∫–∞–ª–æ—Ä—ñ–π"):
                plot_calories_progress(df)

            with st.expander("–í–∞–≥–∞ vs –ö–∞–ª–æ—Ä—ñ—ó"):
                plot_weight_vs_calories(df)

            st.markdown("### üìù –í—Å—ñ –∑–∞–ø–∏—Å–∏")
            st.dataframe(df)
        else:
            st.info("–©–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.")
    else:
        st.info("–©–µ –Ω–µ –¥–æ–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.")

with tab5:
    st.header("–ü–æ—à—É–∫ –∫–∞–ª–æ—Ä—ñ–π –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ —Å–∞–π—Ç—É")
    product_web = st.text_input("–ü—Ä–æ–¥—É–∫—Ç:")
    if st.button("–ó–Ω–∞–π—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó") and product_web:
        st.info("–ô–¥–µ –ø–æ—à—É–∫ –Ω–∞ tablycjakalorijnosti.com.ua ...")
        st.write(get_calories_from_web(product_web))

with tab6:
    st.header("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫")
    show_and_download_diary()
